openapi: 3.0.2
info:
  title: Model-CNS API
  description: API to access MoDEL-CNS data and files.
  version: 1.0.0

servers:
  - url: '{protocol}://mmb.irbbarcelona.org/webdev2/MoDEL-CNS/api/rest/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      version:
        enum:
          - v1
          - current
        default: v1

paths:
  /projects:
    get:
      summary: Get a list of projects.
      description: >
        Get a list of MoDEL-CNS projects (simulations and related data and
        analyses).
      tags:
        - projects
      parameters:
        - name: search
          in: query
          description: text search inside project names and important fields
          schema:
            type: string
        - name: limit
          in: query
          description: pagination, maximum number of projects per query
          schema:
            type: integer
            default: 10
            maximum: 50
        - name: page
          in: query
          description: pagination, page number
          schema:
            type: integer
            default: 1
      responses:
        200:
          description: an array of projects, paginated
          content:
            application/json:
              schema:
                type: object
                properties:
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  filteredCount:
                    type: integer
                    example: 10
                  totalCount:
                    type: integer
                    example: 250
  /projects/{projectAccessionOrID}:
    get:
      summary: Get a project by its accession or identifier.
      description: >
        Get a MoDEL-CNS project (simulations and related data and analyses) by
        its accession or identifier.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - projects
      responses:
        200:
          description: a project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{projectAccessionOrID}/files:
    get:
      summary: Get the files for a project.
      description: Get the list of files for a specific MoDEL-CNS project.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - files
      responses:
        200:
          description: a list of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDescription'
  /projects/{projectAccessionOrID}/files/{filename}:
    get:
      summary: Get a file for a project.
      description: >
        Get a specific file for a specific MoDEL-CNS project by its name.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: filename
          in: path
          description: filename
          required: true
          schema:
            type: string
        - name: range
          in: header
          schema:
            type: string
          description: >
            Specify a byte, atom, or frame range for the returned file.
            Especially useful for 'trajectory.bin' files, since that way one can
            ask for specific frames or atoms instead of the whole file.
            [See here for information on how to use range requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests#Requesting_a_specific_range_from_a_server)
          examples:
            firstAtom:
              summary: >
                first coordinates (x, y, and z) for the first 3 atoms of the
                first 2 frames.
              value: atoms=0-2, frames=0-1
      tags:
        - files
      responses:
        200:
          description: a file
          content:
            text/plain:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                format: binary
        206:
          description: a partial file
          content:
            text/plain:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                format: binary

  /projects/{projectAccessionOrID}/analyses:
    get:
      summary: Get the analyses for a project.
      description: Get the list of analyses for a specific MoDEL-CNS project.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - analyses
      responses:
        200:
          description: a list of analyses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisList'
  /projects/{projectAccessionOrID}/analyses/{analysisName}:
    get:
      summary: Get an analysis for a project.
      description: >
        Get a specific analysis for a specific MoDEL-CNS project by its name.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: analysisName
          in: path
          description: analysis name
          required: true
          schema:
            type: string
          example: rgyr
      tags:
        - analyses
      responses:
        200:
          description: an analysis object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analysis'

  /projects/{projectAccessionOrID}/chains:
    get:
      summary: Get the sequence chains for a project.
      description: >
        Get the list of sequence chains for a specific MoDEL-CNS project.
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
      tags:
        - chains
      responses:
        200:
          description: a list of sequence chains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChainList'
  /projects/{projectAccessionOrID}/chains/{chainName}:
    get:
      summary: Get a sequence chain for a project.
      description: >
        Get a specific sequence chain for a specific MoDEL-CNS project by its
        name (case-sensitive). It might include sequence analyses run on
        external services (InterProScan and HMMer)
      parameters:
        - $ref: '#/definitions/arguments/projectAccessionOrID'
        - name: chainName
          in: path
          description: chain name (case-sensitive)
          required: true
          schema:
            type: string
          example: A
      tags:
        - chains
      responses:
        200:
          description: an sequence chain object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chain'

components:
  schemas:
    FileDescription:
      type: object
      properties:
        length:
          type: integer
          description: length in bytes
          example: 368194
        filename:
          type: string
          example: md.structure.pdb
        md5:
          type: string
          pattern: '^[0-9a-f]{32}$'
          example: 79ac468d3cc434ad777048b51e65afc3
        contentType:
          type: string
          example: chemical/x-pdb
        metadata:
          type: object

    Project:
      type: object
      required:
        - identifier
        - metadata
        - pdbInfo
        - analyses
        - chains
        - files
      properties:
        identifier:
          type: string
          pattern:
            $ref: '#/definitions/constants/IDPattern'
          example: 5d08b56e174bf85a17e00438
        accession:
          type: string
          pattern:
            $ref: '#/definitions/constants/AccessionPattern'
          example: MCNS00001
        metadata:
          type: object
        pdbInfo:
          type: object
        analyses:
          $ref: '#/components/schemas/AnalysisList'
        chains:
          $ref: '#/components/schemas/ChainList'
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileDescription'

    Analysis:
      type: object
      required:
        - name
        - step
        - y
      properties:
        name:
          type: string
          example: pca
        step:
          type: integer
          example: 10
        y:
          oneOf:
            - type: object
            - type: array

    AnalysisList:
      type: array
      description: list of available analyses
      items: string
      example:
        - pca
        - rgyr

    Chain:
      type: object
      required:
        - name
        - sequence
      properties:
        name:
          type: string
          description: case-sensitive chain name of a chain in the simulation
          example: A
        sequence:
          type: string
          description: amino-acid sequence of the chain in one-letter format
          example: KEPCFREENANFNKIF
        interproscan:
          type: object
          description: >
            Unprocessed payload of this sequence submitted to the InterProScan
            service. Might not exist if the sequence is too short. Refer to
            InterProScan documentation for schema.
        hmmer:
          type: object
          description: >
            Unprocessed payload of this sequence submitted to the HMMer service.
            Might not exist if the sequence is too short. Refer to HMMer
            documentation for schema.

    ChainList:
      type: array
      description: list of chains whose information is available
      items: string
      example:
        - A
        - B

definitions:
  constants:
    IDPattern: '^[a-fA-F\d]{24}$'
    AccessionPattern: '^MCNS[0-9]{5}$'
  arguments:
    projectAccessionOrID:
      name: projectAccessionOrID
      in: path
      description: >
        Project accession or identifier. A project will always have a unique
        identifier (even if unpublished and in the development version of the
        API). When published, it will be assigned a never-changing unique
        user-friendly accession starting with MCNS. You can use either to access
        the corresponding data, even if the accession is recommended
      required: true
      schema:
        type: string
        pattern: '^([a-fA-F\d]{24})|(MCNS[0-9]{5})$'
      example: MCNS00001
